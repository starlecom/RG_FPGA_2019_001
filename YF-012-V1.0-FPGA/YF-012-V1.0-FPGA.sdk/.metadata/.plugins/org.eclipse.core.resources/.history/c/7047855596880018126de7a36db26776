
/*
 *
 * www.osrc.cn
 * www.milinker.com
 * copyright by nan jin mi lian dian zi www.osrc.cn
*/
#if 1
#include "gpio_dev.h"

static  XGpio xgpio_send_flag;
static  XGpio xgpio_start_flag;
static  XGpio xgpio_trig_level;
static  XGpio xgpio_trig_level_l;
static  XGpio xgpio_pretrig;
static  XGpio xgpio_trig_length;
static  XGpio xgpio_dds_config;
static  XGpio xgpio_pulse_period;
static  XGpio xgpio_pulse_offset;
static  XGpio xgpio_pulse_width;
static  XGpio xgpio_src_sel;
static  XGpio xgpio_datagen_ready;
static  XGpio xgpio_led;
static  XGpio xgpio_ch_sel;
static  XGpio xgpio_ch_en1;
static  XGpio xgpio_ch_en2;
static  XGpio xgpio_ch_en3;
static  XGpio xgpio_adjusted_value;
static  u8 ch_state;  //Three channel is open.

int  m_gpio_init(void)
{
	int Status;
//	int i=0;
	/*
	 * Initialize the GPIO driver
	 */
	Status = XGpio_Initialize(&xgpio_send_flag, 	GPIO_ID_SEND_FLAG);		if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_start_flag, 	GPIO_ID_START_FLAG);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_trig_level, 	GPIO_ID_TRIG_LEVEL);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_trig_level_l, 	GPIO_ID_TRIG_LEVEL_L);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_pretrig, 		GPIO_ID_PRETRIG);		if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_trig_length, 	GPIO_ID_TRIG_LENGTH);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_dds_config, 	GPIO_ID_DDS_CONFIG);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_pulse_period, 	GPIO_ID_PULSE_PERIOD);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_pulse_offset, 	GPIO_ID_PULSE_OFFSET);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_pulse_width, 	GPIO_ID_PULSE_WIDTH);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_src_sel, 		GPIO_ID_SRC_SEL);		if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_datagen_ready, GPIO_ID_DATAGEN_READY);	if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_led, 			GPIO_ID_LED);			if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_ch_sel, 		GPIO_ID_CH_SEL);		if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_ch_en1, 		GPIO_ID_CH_EN1);		if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_ch_en2, 		GPIO_ID_CH_EN2);		if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_ch_en3, 		GPIO_ID_CH_EN3);		if (Status != XST_SUCCESS) {return XST_FAILURE;	}
	Status = XGpio_Initialize(&xgpio_adjusted_value, 		GPIO_ID_ADJUSTED_VALUE);		if (Status != XST_SUCCESS) {return XST_FAILURE;	}

	XGpio_SetDataDirection(&xgpio_send_flag, 	1, 	GPIO_DIR_INPUT);
	XGpio_SetDataDirection(&xgpio_start_flag, 	1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_trig_level, 	1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_trig_level_l, 1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_pretrig, 		1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_trig_length, 	1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_dds_config, 	1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_pulse_period, 1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_pulse_offset, 1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_pulse_width, 	1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_src_sel, 		1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_datagen_ready,1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_led,			1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_ch_sel,		1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_ch_en1,		1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_ch_en2,		1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_ch_en3,		1, 	GPIO_DIR_OUTPUT);
	XGpio_SetDataDirection(&xgpio_adjusted_value,1, GPIO_DIR_OUTPUT);

	gpio_set_trig_level		(0);         //触发电平
	gpio_set_trig_level_l	(0);         //触发电平
	gpio_set_pretrig		(500);          //预触发
	gpio_set_trig_length	(1000);			//触发深度1000,暂时不能更改
	gpio_set_dds_config		(26843546);     //信号源配置
	gpio_set_pulse_period	(20000);        //脉冲周期
	gpio_set_pulse_offset	(0);            //脉冲偏置
	gpio_set_pulse_width	(20000);        //脉冲宽度
	gpio_set_src_sel		(1);            //信号源选择
	gpio_set_led			(0x00);
	gpio_set_ch_sel			(0x01);			//选择通道
	gpio_set_chs			(0x01);
	gpio_set_datagen_ready	(1);
	gpio_set_start_flag		(1);

	return 0;
	
}
void gpio_set_start_flag	(u16 dat){	XGpio_DiscreteWrite(&xgpio_start_flag, 	1, dat&0x01);}
void gpio_set_trig_level	(u16 dat){	XGpio_DiscreteWrite(&xgpio_trig_level, 	1, dat);	}
void gpio_set_trig_level_l	(u16 dat){	XGpio_DiscreteWrite(&xgpio_trig_level, 	1, dat);	}
void gpio_set_pretrig		(u16 dat){	XGpio_DiscreteWrite(&xgpio_pretrig, 	1, dat);	}
void gpio_set_trig_length	(u16 dat){	XGpio_DiscreteWrite(&xgpio_trig_length, 1, dat);	}
void gpio_set_dds_config	(u32 dat){	XGpio_DiscreteWrite(&xgpio_dds_config, 	1, dat);	}
void gpio_set_pulse_period	(u16 dat){	XGpio_DiscreteWrite(&xgpio_pulse_period, 	1, dat);	}
void gpio_set_pulse_offset	(u16 dat){	XGpio_DiscreteWrite(&xgpio_pulse_offset, 	1, dat);	}
void gpio_set_pulse_width	(u16 dat){	XGpio_DiscreteWrite(&xgpio_pulse_width, 	1, dat);	}
void gpio_set_src_sel		(u16 dat){	XGpio_DiscreteWrite(&xgpio_src_sel, 	1, dat&0x01);	}
void gpio_set_datagen_ready	(u16 dat){	XGpio_DiscreteWrite(&xgpio_datagen_ready, 	1, dat&0x01);	}
void gpio_set_led			(u16 dat){	XGpio_DiscreteWrite(&xgpio_led, 	1, dat&0x0f);	}
void gpio_set_ch_sel		(u16 dat){	XGpio_DiscreteWrite(&xgpio_ch_sel, 	1, dat&0x0f);	ch_state = dat&0x0f;}
void gpio_set_ch_en1		(u16 dat){	XGpio_DiscreteWrite(&xgpio_ch_en1, 	1, dat&0x01);	}
void gpio_set_ch_en2		(u16 dat){	XGpio_DiscreteWrite(&xgpio_ch_en2, 	1, dat&0x01);	}
void gpio_set_ch_en3		(u16 dat){	XGpio_DiscreteWrite(&xgpio_ch_en3, 	1, dat&0x01);	}
void gpio_set_adjusted_value(u16 dat){	XGpio_DiscreteWrite(&xgpio_adjusted_value, 	1, dat);	}

void gpio_set_chs(u16 dat)
{
	u16 ch1 = dat&(1<<0);
	u16 ch2 = (dat&(1<<1))>>1;
	u16 ch3 = (dat&(1<<2))>>2;
	gpio_set_ch_en1(ch1);
	gpio_set_ch_en2(ch2);
	gpio_set_ch_en3(ch3);
}
u8 m_gpio_get(void)
{
	u32 result=XGpio_DiscreteRead(&xgpio_send_flag, 1);
	return (u8)(result&0x01);
}

u8   get_ch_state(void)
{
	return ch_state;
}

#endif
